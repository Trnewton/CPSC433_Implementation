Or-Tree Search Model:
    - Each problem description is a vector of all labs and courses assigned or unassigned to a slot
  	
    **** Variables ****
    G - guide vector
    - Access to slots, courses, and labs
    - Anything else needed for checkHard()
        - maxLabs
        - maxCourses
        - etc.
    - Structure for holding tree 
  
    **** Functions ****
    checkHard():
        True if hard constraints are partial met 
        
    - Similar to checkHard() but must check everything is assigned 
    solved(s):
        true if s is solved
        
    - Probably don't need this, just use checkHard()
    unsolved(s):
        true if s is unsolvable
        
    - Function to return alternatives
    altern(s):
        return s extended

    - depth() implements search control K_{\lor_1}
    depth():
    while true:
      if solvable leaf:
        change leaf to solved
        break
      else if unsolvable leaf:
        change leaf to unsovlable
      else:
        extend deepest pr==? leaf using alter(s)
    return solved leafnode

    - guided() implments seach control K_{\lor_2}
    guided(G'):
        G = G' 
        while true:
            if solvable leaf:
                change leaf to solved
                break
            else if unsolvable leaf:
                change leaf to unsovlable
            else if s is a leaf node in G:
                extend s
            else:
                extend deepest left most pr==? leaf node using alter(s)
        return solved leafnode
